{
	"info": {
		"_postman_id": "d5b7c33d-adeb-47b9-b031-18d6548df95f",
		"name": "XSEDE_info.xsede.org_TEST_POSTMAN",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21928290"
	},
	"item": [
		{
			"name": "glue2-db-api",
			"item": [
				{
					"name": "abstractservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"",
									"pm.test(\"Save ID\", function () {",
									"    // get mid index of response data array",
									"    let arrLen = pm.response.json().length;",
									"    //console.log(arrLen);",
									"    if (arrLen < 1) {",
									"        // set ID variable to none and return fail",
									"        pm.collectionVariables.set(\"xsede_ID\",\"NONE\");",
									"        pm.expect.fail(\" No element exist!\");",
									"    }",
									"",
									"    let midIdx = Math.floor(arrLen/2);",
									"    //console.log(midIdx);",
									"",
									"    // get ID of midIdx element",
									"    ID = pm.response.json()[midIdx].ID;",
									"    console.log(ID);",
									"",
									"    // get ResourceID of first element - TEST purpose",
									"    //resourceID = response.json()[midIdx].ResourceID;",
									"    //console.log(resourceID);",
									"",
									"    // set ID to collection variable",
									"    pm.collectionVariables.set(\"xsede_ID\", ID);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/abstractservice/",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"abstractservice",
								""
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "abstractservice_ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// Get ID from collection variable which is set by previous test",
									"console.log(\"Load ID: \" + pm.collectionVariables.get(\"xsede_ID\"));",
									"pm.environment.set(\"localID\", pm.collectionVariables.get(\"xsede_ID\"));",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/abstractservice/ID/{{localID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"abstractservice",
								"ID",
								"{{localID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "acceleratorenvironment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									"pm.test(\"Save ID\", function () {",
									"    // get mid index of response data array",
									"    arrLen = pm.response.json().results.length;",
									"    //console.log(arrLen);",
									"    if (arrLen < 1) {",
									"        // set ID variable to none and return fail",
									"        pm.collectionVariables.set(\"xsede_ID\",\"NONE\");",
									"        pm.expect.fail(\" No element exist!\");",
									"    }",
									"    midIdx = Math.floor(arrLen/2);",
									"    //console.log(midIdx);",
									"",
									"    // get ID of midIdx element",
									"    //console.log(pm.response.json().results[midIdx]);",
									"    ID = pm.response.json().results[midIdx].ID;",
									"    //console.log(ID);",
									"",
									"    // set ID to a collection variable",
									"    pm.collectionVariables.set(\"xsede_ID\", ID);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/acceleratorenvironment/",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"acceleratorenvironment",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "acceleratorenvironment_ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get ID from collection variable which is set by previous test",
									"console.log(\"Load ID: \" + pm.collectionVariables.get(\"xsede_ID\"));",
									"pm.environment.set(\"localID\", pm.collectionVariables.get(\"xsede_ID\"));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/acceleratorenvironment/ID/{{localID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"acceleratorenvironment",
								"ID",
								"{{localID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "accesspolicy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									"pm.test.skip(\"Save ID\", function () {",
									"    // get mid index of response data array",
									"    arrLen = pm.response.json().results.length;",
									"    //console.log(arrLen);",
									"    if (arrLen < 1) {",
									"        // set ID variable to none and return fail",
									"        pm.collectionVariables.set(\"xsede_ID\",\"NONE\");",
									"        pm.expect.fail(\" No element exist!\");",
									"    }",
									"    midIdx = Math.floor(arrLen/2);",
									"    //console.log(midIdx);",
									"",
									"    // get ID of midIdx element",
									"    //console.log(pm.response.json().results[midIdx]);",
									"    ID = pm.response.json().results[midIdx].ID;",
									"    //console.log(ID);",
									"",
									"    // set ID to a collection variable",
									"    pm.collectionVariables.set(\"xsede_ID\", ID);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/accesspolicy/",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"accesspolicy",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "accesspolicy_ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test.skip(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get ID from collection variable which is set by previous test",
									"console.log(\"Load ID: \" + pm.collectionVariables.get(\"xsede_ID\"));",
									"pm.environment.set(\"localID\", pm.collectionVariables.get(\"xsede_ID\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/accesspolicy/ID/{{localID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"accesspolicy",
								"ID",
								"{{localID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "admindomain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									"pm.test.skip(\"Save ID\", function () {",
									"    // get mid index of response data array",
									"    arrLen = pm.response.json().results.length;",
									"    //console.log(arrLen);",
									"    if (arrLen < 1) {",
									"        // set ID variable to none and return fail",
									"        pm.collectionVariables.set(\"xsede_ID\",\"NONE\");",
									"        pm.expect.fail(\" No element exist!\");",
									"    }",
									"    midIdx = Math.floor(arrLen/2);",
									"    //console.log(midIdx);",
									"",
									"    // get ID of midIdx element",
									"    //console.log(pm.response.json().results[midIdx]);",
									"    ID = pm.response.json().results[midIdx].ID;",
									"    //console.log(ID);",
									"",
									"    // set ID to a collection variable",
									"    pm.collectionVariables.set(\"xsede_ID\", ID);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/admindomain/\n",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"admindomain",
								"\n"
							]
						}
					},
					"response": []
				},
				{
					"name": "admindomain_ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get ID from collection variable which is set by previous test",
									"console.log(\"Load ID: \" + pm.collectionVariables.get(\"xsede_ID\"));",
									"pm.environment.set(\"localID\", pm.collectionVariables.get(\"xsede_ID\"));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test.skip(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/admindomain/ID/{{localID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"admindomain",
								"ID",
								"{{localID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "applicationenvironment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1300);",
									"});",
									"",
									"",
									"pm.test(\"Save ID\", function () {",
									"    // get mid index of response data array",
									"    let arrLen = pm.response.json().length;",
									"    //console.log(arrLen);",
									"    if (arrLen < 1) {",
									"        // set ID variable to none and return fail",
									"        pm.collectionVariables.set(\"xsede_ID\",\"NONE\");",
									"        pm.expect.fail(\" No element exist!\");",
									"    }",
									"",
									"    let midIdx = Math.floor(arrLen/2);",
									"    //console.log(midIdx);",
									"",
									"    // get ID of midIdx element",
									"    ID = pm.response.json()[midIdx].ID;",
									"    console.log(ID);",
									"",
									"    // get ResourceID of first element - TEST purpose",
									"    //resourceID = response.json()[midIdx].ResourceID;",
									"    //console.log(resourceID);",
									"",
									"    // set ID to collection variable",
									"    pm.collectionVariables.set(\"xsede_ID\", ID);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/applicationenvironment/\n",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"applicationenvironment",
								"\n"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "applicationenvironment_ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// Get ID from collection variable which is set by previous test",
									"console.log(\"Load ID: \" + pm.collectionVariables.get(\"xsede_ID\"));",
									"pm.environment.set(\"localID\", pm.collectionVariables.get(\"xsede_ID\"));",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/applicationenvironment/ID/{{localID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"applicationenvironment",
								"ID",
								"{{localID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "applicationhandle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"",
									"pm.test(\"Save ID\", function () {",
									"    // get mid index of response data array",
									"    let arrLen = pm.response.json().length;",
									"    //console.log(arrLen);",
									"    if (arrLen < 1) {",
									"        // set ID variable to none and return fail",
									"        pm.collectionVariables.set(\"xsede_ID\",\"NONE\");",
									"        pm.expect.fail(\" No element exist!\");",
									"    }",
									"",
									"    let midIdx = Math.floor(arrLen/2);",
									"    //console.log(midIdx);",
									"",
									"    // get ID of midIdx element",
									"    ID = pm.response.json()[midIdx].ID;",
									"    console.log(ID);",
									"",
									"    // get ResourceID of first element - TEST purpose",
									"    //resourceID = response.json()[midIdx].ResourceID;",
									"    //console.log(resourceID);",
									"",
									"    // set ID to collection variable",
									"    pm.collectionVariables.set(\"xsede_ID\", ID);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/applicationhandle/",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"applicationhandle",
								""
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "applicationhandle_ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// Get ID from collection variable which is set by previous test",
									"console.log(\"Load ID: \" + pm.collectionVariables.get(\"xsede_ID\"));",
									"pm.environment.set(\"localID\", pm.collectionVariables.get(\"xsede_ID\"));",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/applicationhandle/ID/{{localID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"applicationhandle",
								"ID",
								"{{localID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "computingmanager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Save ID\", function () {",
									"    // get mid index of response data array",
									"    let arrLen = pm.response.json().length;",
									"    //console.log(arrLen);",
									"    if (arrLen < 1) {",
									"        // set ID variable to none and return fail",
									"        pm.collectionVariables.set(\"xsede_ID\",\"NONE\");",
									"        pm.expect.fail(\" No element exist!\");",
									"    }",
									"",
									"    let midIdx = Math.floor(arrLen/2);",
									"    //console.log(midIdx);",
									"",
									"    // get ID of midIdx element",
									"    ID = pm.response.json()[midIdx].ID;",
									"    console.log(ID);",
									"",
									"    // get ResourceID of first element - TEST purpose",
									"    //resourceID = response.json()[midIdx].ResourceID;",
									"    //console.log(resourceID);",
									"",
									"    // set ID to collection variable",
									"    pm.collectionVariables.set(\"xsede_ID\", ID);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/computingmanager/",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"computingmanager",
								""
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "computingmanager_ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// Get ID from collection variable which is set by previous test",
									"console.log(\"Load ID: \" + pm.collectionVariables.get(\"xsede_ID\"));",
									"pm.environment.set(\"localID\", pm.collectionVariables.get(\"xsede_ID\"));",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/computingmanager/ID/{{localID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"computingmanager",
								"ID",
								"{{localID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "computingmanageracceleratorinfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									"pm.test(\"Save ID\", function () {",
									"    // get mid index of response data array",
									"    arrLen = pm.response.json().results.length;",
									"    //console.log(arrLen);",
									"    if (arrLen < 1) {",
									"        // set ID variable to none and return fail",
									"        pm.collectionVariables.set(\"xsede_ID\",\"NONE\");",
									"        pm.expect.fail(\" No element exist!\");",
									"    }",
									"    midIdx = Math.floor(arrLen/2);",
									"    //console.log(midIdx);",
									"",
									"    // get ID of midIdx element",
									"    //console.log(pm.response.json().results[midIdx]);",
									"    ID = pm.response.json().results[midIdx].ID;",
									"    //console.log(ID);",
									"",
									"    // set ID to a collection variable",
									"    pm.collectionVariables.set(\"xsede_ID\", ID);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/computingmanageracceleratorinfo/\n",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"computingmanageracceleratorinfo",
								"\n"
							]
						}
					},
					"response": []
				},
				{
					"name": "computingmanageracceleratorinfo_ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// Get ID from collection variable which is set by previous test",
									"console.log(\"Load ID: \" + pm.collectionVariables.get(\"xsede_ID\"));",
									"pm.environment.set(\"localID\", pm.collectionVariables.get(\"xsede_ID\"));",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/computingmanageracceleratorinfo/ID/{{localID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"computingmanageracceleratorinfo",
								"ID",
								"{{localID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "computingshare",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									"pm.test(\"Save ID\", function () {",
									"    // get mid index of response data array",
									"    let arrLen = pm.response.json().length;",
									"    //console.log(arrLen);",
									"    if (arrLen < 1) {",
									"        // set ID variable to none and return fail",
									"        pm.collectionVariables.set(\"xsede_ID\",\"NONE\");",
									"        pm.expect.fail(\" No element exist!\");",
									"    }",
									"",
									"    let midIdx = Math.floor(arrLen/2);",
									"    //console.log(midIdx);",
									"",
									"    // get ID of midIdx element",
									"    ID = pm.response.json()[midIdx].ID;",
									"    console.log(ID);",
									"",
									"    // get ResourceID of first element - TEST purpose",
									"    //resourceID = response.json()[midIdx].ResourceID;",
									"    //console.log(resourceID);",
									"",
									"    // set ID to collection variable",
									"    pm.collectionVariables.set(\"xsede_ID\", ID);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/computingshare/",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"computingshare",
								""
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "computingshare_ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// Get ID from collection variable which is set by previous test",
									"console.log(\"Load ID: \" + pm.collectionVariables.get(\"xsede_ID\"));",
									"pm.environment.set(\"localID\", pm.collectionVariables.get(\"xsede_ID\"));",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/computingshare/ID/{{localID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"computingshare",
								"ID",
								"{{localID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "computingshareacceleratorinfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									"pm.test.skip(\"Save ID\", function () {",
									"    // get mid index of response data array",
									"    arrLen = pm.response.json().results.length;",
									"    //console.log(arrLen);",
									"    if (arrLen < 1) {",
									"        // set ID variable to none and return fail",
									"        pm.collectionVariables.set(\"xsede_ID\",\"NONE\");",
									"        pm.expect.fail(\" No element exist!\");",
									"    }",
									"    midIdx = Math.floor(arrLen/2);",
									"    //console.log(midIdx);",
									"",
									"    // get ID of midIdx element",
									"    //console.log(pm.response.json().results[midIdx]);",
									"    ID = pm.response.json().results[midIdx].ID;",
									"    //console.log(ID);",
									"",
									"    // set ID to a collection variable",
									"    pm.collectionVariables.set(\"xsede_ID\", ID);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/computingshareacceleratorinfo/\n",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"computingshareacceleratorinfo",
								"\n"
							]
						}
					},
					"response": []
				},
				{
					"name": "computingshareacceleratorinfo_ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// Get ID from collection variable which is set by previous test",
									"console.log(\"Load ID: \" + pm.collectionVariables.get(\"xsede_ID\"));",
									"pm.environment.set(\"localID\", pm.collectionVariables.get(\"xsede_ID\"));",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test.skip(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/computingshareacceleratorinfo/ID/{{localID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"computingshareacceleratorinfo",
								"ID",
								"{{localID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									"pm.test.skip(\"Save ID\", function () {",
									"    // get mid index of response data array",
									"    arrLen = pm.response.json().results.length;",
									"    //console.log(arrLen);",
									"    if (arrLen < 1) {",
									"        // set ID variable to none and return fail",
									"        pm.collectionVariables.set(\"xsede_ID\",\"NONE\");",
									"        pm.expect.fail(\" No element exist!\");",
									"    }",
									"    midIdx = Math.floor(arrLen/2);",
									"    //console.log(midIdx);",
									"",
									"    // get ID of midIdx element",
									"    //console.log(pm.response.json().results[midIdx]);",
									"    ID = pm.response.json().results[midIdx].ID;",
									"    //console.log(ID);",
									"",
									"    // set ID to a collection variable",
									"    pm.collectionVariables.set(\"xsede_ID\", ID);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/contact/\n",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"contact",
								"\n"
							]
						}
					},
					"response": []
				},
				{
					"name": "contact_ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// Get ID from collection variable which is set by previous test",
									"console.log(\"Load ID: \" + pm.collectionVariables.get(\"xsede_ID\"));",
									"pm.environment.set(\"localID\", pm.collectionVariables.get(\"xsede_ID\"));",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test.skip(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/contact/ID/{{localID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"contact",
								"ID",
								"{{localID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									"pm.test(\"Save ID\", function () {",
									"    // get mid index of response data array",
									"    let arrLen = pm.response.json().length;",
									"    //console.log(arrLen);",
									"    if (arrLen < 1) {",
									"        // set ID variable to none and return fail",
									"        pm.collectionVariables.set(\"xsede_ID\",\"NONE\");",
									"        pm.expect.fail(\" No element exist!\");",
									"    }",
									"",
									"    let midIdx = Math.floor(arrLen/2);",
									"    //console.log(midIdx);",
									"",
									"    // get ID of midIdx element",
									"    ID = pm.response.json()[midIdx].ID;",
									"    console.log(ID);",
									"",
									"    // get ResourceID of first element - TEST purpose",
									"    //resourceID = response.json()[midIdx].ResourceID;",
									"    //console.log(resourceID);",
									"",
									"    // set ID to collection variable",
									"    pm.collectionVariables.set(\"xsede_ID\", ID);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/endpoint/",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"endpoint",
								""
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "endpoint_ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// Get ID from collection variable which is set by previous test",
									"console.log(\"Load ID: \" + pm.collectionVariables.get(\"xsede_ID\"));",
									"pm.environment.set(\"localID\", pm.collectionVariables.get(\"xsede_ID\"));",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/endpoint/ID/{{localID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"endpoint",
								"ID",
								"{{localID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "executionenvironment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									"",
									"pm.test(\"Save ID\", function () {",
									"    // get mid index of response data array",
									"    let arrLen = pm.response.json().length;",
									"    //console.log(arrLen);",
									"    if (arrLen < 1) {",
									"        // set ID variable to none and return fail",
									"        pm.collectionVariables.set(\"xsede_ID\",\"NONE\");",
									"        pm.expect.fail(\" No element exist!\");",
									"    }",
									"",
									"    let midIdx = Math.floor(arrLen/2);",
									"    //console.log(midIdx);",
									"",
									"    // get ID of midIdx element",
									"    ID = pm.response.json()[midIdx].ID;",
									"    console.log(ID);",
									"",
									"    // get ResourceID of first element - TEST purpose",
									"    //resourceID = response.json()[midIdx].ResourceID;",
									"    //console.log(resourceID);",
									"",
									"    // set ID to collection variable",
									"    pm.collectionVariables.set(\"xsede_ID\", ID);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/executionenvironment/\n",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"executionenvironment",
								"\n"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "executionenvironment_ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// Get ID from collection variable which is set by previous test",
									"console.log(\"Load ID: \" + pm.collectionVariables.get(\"xsede_ID\"));",
									"pm.environment.set(\"localID\", pm.collectionVariables.get(\"xsede_ID\"));",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/executionenvironment/ID/{{localID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"executionenvironment",
								"ID",
								"{{localID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									"",
									"pm.test(\"Save ID\", function () {",
									"    // get mid index of response data array",
									"    let arrLen = pm.response.json().length;",
									"    //console.log(arrLen);",
									"    if (arrLen < 1) {",
									"        // set ID variable to none and return fail",
									"        pm.collectionVariables.set(\"xsede_ID\",\"NONE\");",
									"        pm.expect.fail(\" No element exist!\");",
									"    }",
									"",
									"    let midIdx = Math.floor(arrLen/2);",
									"    //console.log(midIdx);",
									"",
									"    // get ID of midIdx element",
									"    ID = pm.response.json()[midIdx].ID;",
									"    console.log(ID);",
									"",
									"    // get ResourceID of first element - TEST purpose",
									"    //resourceID = response.json()[midIdx].ResourceID;",
									"    //console.log(resourceID);",
									"",
									"    // set ID to collection variable",
									"    pm.collectionVariables.set(\"xsede_ID\", ID);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/location/\n",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"location",
								"\n"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "location_ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// Get ID from collection variable which is set by previous test",
									"console.log(\"Load ID: \" + pm.collectionVariables.get(\"xsede_ID\"));",
									"pm.environment.set(\"localID\", pm.collectionVariables.get(\"xsede_ID\"));",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/location/ID/{{localID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"location",
								"ID",
								"{{localID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "userdomain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									"pm.test.skip(\"Save ID\", function () {",
									"    // get mid index of response data array",
									"    arrLen = pm.response.json().results.length;",
									"    //console.log(arrLen);",
									"    if (arrLen < 1) {",
									"        // set ID variable to none and return fail",
									"        pm.collectionVariables.set(\"xsede_ID\",\"NONE\");",
									"        pm.expect.fail(\" No element exist!\");",
									"    }",
									"    midIdx = Math.floor(arrLen/2);",
									"    //console.log(midIdx);",
									"",
									"    // get ID of midIdx element",
									"    //console.log(pm.response.json().results[midIdx]);",
									"    ID = pm.response.json().results[midIdx].ID;",
									"    //console.log(ID);",
									"",
									"    // set ID to a collection variable",
									"    pm.collectionVariables.set(\"xsede_ID\", ID);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/userdomain/",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"userdomain",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "userdomain_ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// Get ID from collection variable which is set by previous test",
									"console.log(\"Load ID: \" + pm.collectionVariables.get(\"xsede_ID\"));",
									"pm.environment.set(\"localID\", pm.collectionVariables.get(\"xsede_ID\"));",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test.skip(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-db-api/v1/userdomain/ID/{{localID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-db-api",
								"v1",
								"userdomain",
								"ID",
								"{{localID}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "glue2-view-api",
			"item": [
				{
					"name": "services-spf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									"pm.test(\"Save Parameters for next test\", function () {",
									"    // get mid index of response data array",
									"    let arrLen = pm.response.json().length;",
									"    //console.log(arrLen);",
									"    if (arrLen < 1) {",
									"        // set ID variable to none and return fail",
									"        pm.collectionVariables.set(\"xsede_ID\",\"NONE\");",
									"        pm.expect.fail(\" No element exist!\");",
									"    }",
									"",
									"    let midIdx = Math.floor(arrLen/2);",
									"    //console.log(midIdx);",
									"",
									"    //----------------------------",
									"    // Save ID",
									"    // get middle element ",
									"    ID = pm.response.json()[midIdx].ID;",
									"    console.log(\"SAVED ID: \" + ID);",
									"    // set to collection variable",
									"    pm.collectionVariables.set(\"xsede_ID\", ID);",
									"",
									"    //-----------------------------------",
									"    // Save InterfaceName",
									"    // get middle element ",
									"    interfaceName = pm.response.json()[midIdx].InterfaceName;",
									"    console.log(\"SAVED InterfaceName: \" + interfaceName);",
									"    // set ID to collection variable",
									"    pm.collectionVariables.set(\"interfaceName\", interfaceName);",
									"",
									"    //-----------------------------------",
									"    // Save ResourceID",
									"    // get middle element ",
									"    resourceID = pm.response.json()[midIdx].ResourceID;",
									"    console.log(\"SAVED ResourceID: \" + resourceID);",
									"    // set to collection variable",
									"    pm.collectionVariables.set(\"resourceID\", resourceID);",
									"",
									"    //-----------------------------------",
									"    // Save ServiceType",
									"    // get middle element ",
									"    serviceType = pm.response.json()[midIdx].ServiceType;",
									"    console.log(\"SAVED ServiceType: \" + serviceType);",
									"    // set to collection variable",
									"    pm.collectionVariables.set(\"serviceType\", serviceType);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-views-api/v1/services-spf/",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-views-api",
								"v1",
								"services-spf",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "services-spf_ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// collection variables that are set by previous test",
									"console.log(\"Load ID: \" + pm.collectionVariables.get(\"xsede_ID\"));",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-views-api/v1/services-spf/ID/{{xsede_ID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-views-api",
								"v1",
								"services-spf",
								"ID",
								"{{xsede_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "services-spf_InterfaceName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// collection variables that are set by previous test",
									"console.log(\"Loaded InterfaceName: \" + pm.collectionVariables.get(\"interfaceName\"));",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-views-api/v1/services-spf/InterfaceName/{{interfaceName}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-views-api",
								"v1",
								"services-spf",
								"InterfaceName",
								"{{interfaceName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "services-spf_ResourceID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// collection variables that are set by previous test",
									"console.log(\"Load ResourceID: \" + pm.collectionVariables.get(\"resourceID\"));",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-views-api/v1/services-spf/ResourceID/{{resourceID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-views-api",
								"v1",
								"services-spf",
								"ResourceID",
								"{{resourceID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "services-spf_ServiceType",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// collection variables that are set by previous test",
									"console.log(\"Load ServiceType: \" + pm.collectionVariables.get(\"serviceType\"));",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-views-api/v1/services-spf/ServiceType/{{serviceType}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-views-api",
								"v1",
								"services-spf",
								"ServiceType",
								"{{serviceType}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									"pm.test(\"Save Parameters for next test\", function () {",
									"    // get mid index of response data array",
									"    let arrLen = pm.response.json().length;",
									"    //console.log(arrLen);",
									"    if (arrLen < 1) {",
									"        // set ID variable to none and return fail",
									"        pm.collectionVariables.set(\"xsede_ID\",\"NONE\");",
									"        pm.expect.fail(\" No element exist!\");",
									"    }",
									"",
									"    let midIdx = Math.floor(arrLen/2);",
									"    //console.log(midIdx);",
									"",
									"    //----------------------------",
									"    // Save ID",
									"    // get middle element ",
									"    ID = pm.response.json()[midIdx].ID;",
									"    console.log(\"SAVED ID: \" + ID);",
									"    // set to collection variable",
									"    pm.collectionVariables.set(\"xsede_ID\", ID);",
									"",
									"    //-----------------------------------",
									"    // Save InterfaceName",
									"    // get middle element ",
									"    interfaceName = pm.response.json()[midIdx].InterfaceName;",
									"    console.log(\"SAVED InterfaceName: \" + interfaceName);",
									"    // set ID to collection variable",
									"    pm.collectionVariables.set(\"interfaceName\", interfaceName);",
									"",
									"    //-----------------------------------",
									"    // Save ResourceID",
									"    // get middle element ",
									"    resourceID = pm.response.json()[midIdx].ResourceID;",
									"    console.log(\"SAVED ResourceID: \" + resourceID);",
									"    // set to collection variable",
									"    pm.collectionVariables.set(\"resourceID\", resourceID);",
									"",
									"    //-----------------------------------",
									"    // Save ServiceType",
									"    // get middle element ",
									"    serviceType = pm.response.json()[midIdx].ServiceType;",
									"    console.log(\"SAVED ServiceType: \" + serviceType);",
									"    // set to collection variable",
									"    pm.collectionVariables.set(\"serviceType\", serviceType);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-views-api/v1/services/",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-views-api",
								"v1",
								"services",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "services_ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// collection variables that are set by previous test",
									"console.log(\"Load ID: \" + pm.collectionVariables.get(\"xsede_ID\"));",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-views-api/v1/services/ID/{{xsede_ID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-views-api",
								"v1",
								"services",
								"ID",
								"{{xsede_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "services_InterfaceName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// collection variables that are set by previous test",
									"console.log(\"Load InterfaceName: \" + pm.collectionVariables.get(\"interfaceName\"));",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-views-api/v1/services/InterfaceName/{{interfaceName}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-views-api",
								"v1",
								"services",
								"InterfaceName",
								"{{interfaceName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "services_ResourceID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// collection variables that are set by previous test",
									"console.log(\"Load ResourceID: \" + pm.collectionVariables.get(\"resourceID\"));",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-views-api/v1/services/ResourceID/{{resourceID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-views-api",
								"v1",
								"services",
								"ResourceID",
								"{{resourceID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "services_ServiceType",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// collection variables that are set by previous test",
									"console.log(\"Load ServiceType: \" + pm.collectionVariables.get(\"serviceType\"));",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-views-api/v1/services/ServiceType/{{serviceType}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-views-api",
								"v1",
								"services",
								"ServiceType",
								"{{serviceType}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "software-spf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4500);",
									"});",
									"",
									"pm.test(\"Save Parameters for next test\", function () {",
									"    // get mid index of response data array",
									"    let arrLen = pm.response.json().length;",
									"    //console.log(arrLen);",
									"    if (arrLen < 1) {",
									"        // set ID variable to none and return fail",
									"        pm.collectionVariables.set(\"xsede_ID\",\"NONE\");",
									"        pm.expect.fail(\" No element exist!\");",
									"    }",
									"",
									"    let midIdx = Math.floor(arrLen/2);",
									"    //console.log(midIdx);",
									"",
									"    //----------------------------",
									"    // Save ID",
									"    // get middle element ",
									"    ID = pm.response.json()[midIdx].ID;",
									"    console.log(\"SAVED ID: \" + ID);",
									"    // set to collection variable",
									"    pm.collectionVariables.set(\"xsede_ID\", ID);",
									"",
									"    //-----------------------------------",
									"    // Save ResourceID",
									"    // get middle element ",
									"    resourceID = pm.response.json()[midIdx].ResourceID;",
									"    console.log(\"SAVED ResourceID: \" + resourceID);",
									"    // set to collection variable",
									"    pm.collectionVariables.set(\"resourceID\", resourceID);",
									"",
									"    //-----------------------------------",
									"    // Save AppName",
									"    // get middle element ",
									"    appName = pm.response.json()[midIdx].AppName;",
									"    console.log(\"SAVED AppName: \" + appName);",
									"    // set to collection variable",
									"    pm.collectionVariables.set(\"appName\", appName);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-views-api/v1/software-spf/",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-views-api",
								"v1",
								"software-spf",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "software-spf_AppName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// collection variables that are set by previous test",
									"console.log(\"Load AppName: \" + pm.collectionVariables.get(\"appName\"));",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-views-api/v1/software-spf/AppName/{{appName}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-views-api",
								"v1",
								"software-spf",
								"AppName",
								"{{appName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "software-spf_ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// collection variables that are set by previous test",
									"console.log(\"Load ID: \" + pm.collectionVariables.get(\"xsede_ID\"));",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-views-api/v1/software-spf/ID/{{xsede_ID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-views-api",
								"v1",
								"software-spf",
								"ID",
								"{{xsede_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "software-spf_ResourceID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// collection variables that are set by previous test",
									"console.log(\"Load ResourceID: \" + pm.collectionVariables.get(\"resourceID\"));",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-views-api/v1/software-spf/ResourceID/{{resourceID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-views-api",
								"v1",
								"software-spf",
								"ResourceID",
								"{{resourceID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "software",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4500);",
									"});",
									"",
									"pm.test(\"Save Parameters for next test\", function () {",
									"    // get mid index of response data array",
									"    let arrLen = pm.response.json().length;",
									"    //console.log(arrLen);",
									"    if (arrLen < 1) {",
									"        // set ID variable to none and return fail",
									"        pm.collectionVariables.set(\"xsede_ID\",\"NONE\");",
									"        pm.expect.fail(\" No element exist!\");",
									"    }",
									"",
									"    let midIdx = Math.floor(arrLen/2);",
									"    //console.log(midIdx);",
									"",
									"    //----------------------------",
									"    // Save ID",
									"    // get middle element ",
									"    ID = pm.response.json()[midIdx].ID;",
									"    console.log(\"SAVED ID: \" + ID);",
									"    // set to collection variable",
									"    pm.collectionVariables.set(\"xsede_ID\", ID);",
									"",
									"    //-----------------------------------",
									"    // Save ResourceID",
									"    // get middle element ",
									"    resourceID = pm.response.json()[midIdx].ResourceID;",
									"    console.log(\"SAVED ResourceID: \" + resourceID);",
									"    // set to collection variable",
									"    pm.collectionVariables.set(\"resourceID\", resourceID);",
									"",
									"    //-----------------------------------",
									"    // Save AppName",
									"    // get middle element ",
									"    appName = pm.response.json()[midIdx].AppName;",
									"    console.log(\"SAVED AppName: \" + appName);",
									"    // set to collection variable",
									"    pm.collectionVariables.set(\"appName\", appName);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-views-api/v1/software/",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-views-api",
								"v1",
								"software",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "software_AppName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// collection variables that are set by previous test",
									"console.log(\"Load AppName: \" + pm.collectionVariables.get(\"appName\"));",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-views-api/v1/software/AppName/{{appName}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-views-api",
								"v1",
								"software",
								"AppName",
								"{{appName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "software_ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// collection variables that are set by previous test",
									"console.log(\"Load ID: \" + pm.collectionVariables.get(\"xsede_ID\"));",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-views-api/v1/software/ID/{{xsede_ID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-views-api",
								"v1",
								"software",
								"ID",
								"{{xsede_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "software_ResourceID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// collection variables that are set by previous test",
									"console.log(\"Load ResourceID: \" + pm.collectionVariables.get(\"resourceID\"));",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/glue2-views-api/v1/software/ResourceID/{{resourceID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"glue2-views-api",
								"v1",
								"software",
								"ResourceID",
								"{{resourceID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Outages",
			"item": [
				{
					"name": "outages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// SKIP as this can take upto 7sec or more. ",
									"// May add back later when it becomes more in range. ",
									"// Otherwise remove this test. ",
									"pm.test.skip(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test(\"Save Parameters for next test\", function () {",
									"    // get mid index of response data array",
									"    let arrLen = pm.response.json().length;",
									"    //console.log(arrLen);",
									"    if (arrLen < 1) {",
									"        // set ID variable to none and return fail",
									"        pm.collectionVariables.set(\"xsede_ID\",\"NONE\");",
									"        pm.expect.fail(\" No element exist!\");",
									"    }",
									"",
									"    let midIdx = Math.floor(arrLen/2);",
									"    //console.log(midIdx);",
									"",
									"    //----------------------------",
									"    // Save ID",
									"    // get middle element ",
									"    ID = pm.response.json()[midIdx].ID;",
									"    console.log(\"SAVED ID: \" + ID);",
									"    // set to collection variable",
									"    pm.collectionVariables.set(\"xsede_ID\", ID);",
									"",
									"",
									"    //-----------------------------------",
									"    // Save ResourceID",
									"    // get middle element ",
									"    resourceID = pm.response.json()[midIdx].ResourceID;",
									"    console.log(\"SAVED ResourceID: \" + resourceID);",
									"    // set to collection variable",
									"    pm.collectionVariables.set(\"resourceID\", resourceID);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/outages/v1/outages/",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"outages",
								"v1",
								"outages",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "outages_ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// collection variables that are set by previous test",
									"console.log(\"Loaded ID: \" + pm.collectionVariables.get(\"xsede_ID\"));",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/outages/v1/outages/ID/{{xsede_ID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"outages",
								"v1",
								"outages",
								"ID",
								"{{xsede_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "outages_ResourceID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// collection variables that are set by previous test",
									"console.log(\"Loaded ResourceID: \" + pm.collectionVariables.get(\"resourceID\"));",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/outages/v1/outages/ResourceID/{{resourceID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"outages",
								"v1",
								"outages",
								"ResourceID",
								"{{resourceID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "outagesCurrent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/outages/v1/outages/Current/",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"outages",
								"v1",
								"outages",
								"Current",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "outagesFuture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/outages/v1/outages/Future/",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"outages",
								"v1",
								"outages",
								"Future",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "outagesPast",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/outages/v1/outages/Past/",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"outages",
								"v1",
								"outages",
								"Past",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "rdr-db_v1",
			"item": [
				{
					"name": "rdr-xup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Save Parameters for next test\", function () {",
									"    // get mid index of response data array",
									"    let arrLen = pm.response.json().length;",
									"    //console.log(arrLen);",
									"    if (arrLen < 1) {",
									"        // set ID variable to none and return fail",
									"        pm.collectionVariables.set(\"xsede_ID\",\"NONE\");",
									"        pm.expect.fail(\" No element exist!\");",
									"    }",
									"",
									"    let midIdx = Math.floor(arrLen/2);",
									"    //console.log(midIdx);",
									"",
									"    //----------------------------",
									"    // Save ID",
									"    // get middle element ",
									"    ID = pm.response.json()[midIdx].rdr_resource_id;",
									"    console.log(\"SAVED rdr_resource_id: \" + ID);",
									"    // set to collection variable",
									"    pm.collectionVariables.set(\"xsede_ID\", ID);",
									"",
									"",
									"    //-----------------------------------",
									"    // Save ResourceID",
									"    // get middle element ",
									"    resourceId = pm.response.json()[midIdx].info_resourceid;",
									"    console.log(\"SAVED info_resourceid: \" + resourceId);",
									"    // set to collection variable",
									"    pm.collectionVariables.set(\"resourceID\", resourceId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/rdr-db/v1/rdr-xup/",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"rdr-db",
								"v1",
								"rdr-xup",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "rdr-xup_ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// collection variables that are set by previous test",
									"console.log(\"Loaded ID: \" + pm.collectionVariables.get(\"xsede_ID\"));",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/rdr-db/v1/rdr-xup/ID/{{xsede_ID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"rdr-db",
								"v1",
								"rdr-xup",
								"ID",
								"{{xsede_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "rdr-xup_ResourceID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// collection variables that are set by previous test",
									"console.log(\"Loaded ResourceID: \" + pm.collectionVariables.get(\"resourceID\"));",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/rdr-db/v1/rdr-xup/ResourceID/{{resourceID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"rdr-db",
								"v1",
								"rdr-xup",
								"ResourceID",
								"{{resourceID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "rdr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Save Parameters for next test\", function () {",
									"    // get mid index of response data array",
									"    let arrLen = pm.response.json().result_set.length;",
									"    //console.log(arrLen);",
									"    if (arrLen < 1) {",
									"        // set ID variable to none and return fail",
									"        pm.collectionVariables.set(\"xsede_ID\",\"NONE\");",
									"        pm.expect.fail(\" No element exist!\");",
									"    }",
									"",
									"    let midIdx = Math.floor(arrLen/2);",
									"    //console.log(midIdx);",
									"",
									"    //----------------------------",
									"    // Save ID",
									"    // get middle element ",
									"    ID = pm.response.json().result_set[midIdx].rdr_resource_id;",
									"    console.log(\"SAVED rdr_resource_id: \" + ID);",
									"    // set to collection variable",
									"    pm.collectionVariables.set(\"xsede_ID\", ID);",
									"",
									"",
									"    //-----------------------------------",
									"    // Save rdr_type",
									"    // get middle element ",
									"    rdrType = pm.response.json().result_set[midIdx].rdr_type;",
									"    console.log(\"SAVED rdr_type: \" + rdrType);",
									"    // set to collection variable",
									"    pm.collectionVariables.set(\"rdr_Type\", rdrType);",
									"",
									"    //-----------------------------------",
									"    // Save ResourceID",
									"    // get middle element ",
									"    resourceId = pm.response.json().result_set[midIdx].info_resourceid;",
									"    console.log(\"SAVED info_resourceid: \" + resourceId);",
									"    // set to collection variable",
									"    pm.collectionVariables.set(\"resourceID\", resourceId);",
									"",
									"    //-----------------------------------",
									"    // Save info_siteid",
									"    // get middle element ",
									"    infoSiteId = pm.response.json().result_set[midIdx].info_siteid;",
									"    console.log(\"SAVED info_siteid: \" + infoSiteId);",
									"    // set to collection variable",
									"    pm.collectionVariables.set(\"info_siteID\", infoSiteId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/rdr-db/v1/rdr/",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"rdr-db",
								"v1",
								"rdr",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "rdr_ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// collection variables that are set by previous test",
									"console.log(\"Loaded ID: \" + pm.collectionVariables.get(\"xsede_ID\"));",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/rdr-db/v1/rdr/ID/{{xsede_ID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"rdr-db",
								"v1",
								"rdr",
								"ID",
								"{{xsede_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "rdr_RDR_Type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// collection variables that are set by previous test",
									"console.log(\"Loaded rdr_type: \" + pm.collectionVariables.get(\"rdr_Type\"));",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/rdr-db/v1/rdr/RDR_Type/{{rdr_Type}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"rdr-db",
								"v1",
								"rdr",
								"RDR_Type",
								"{{rdr_Type}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "rdr_ResourceID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// collection variables that are set by previous test",
									"console.log(\"Loaded ResourceID: \" + pm.collectionVariables.get(\"resourceID\"));",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/rdr-db/v1/rdr/ResourceID/{{resourceID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"rdr-db",
								"v1",
								"rdr",
								"ResourceID",
								"{{resourceID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "rdr_SiteID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// collection variables that are set by previous test",
									"console.log(\"Loaded info_siteid: \" + pm.collectionVariables.get(\"info_siteID\"));",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/rdr-db/v1/rdr/SiteID/{{info_siteID}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"rdr-db",
								"v1",
								"rdr",
								"SiteID",
								"{{info_siteID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "rdr-db_v2",
			"item": [
				{
					"name": "rdr-xup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Save Parameters for next test\", function () {",
									"    // get mid index of response data array",
									"    let arrLen = pm.response.json().length;",
									"    //console.log(arrLen);",
									"    if (arrLen < 1) {",
									"        // set ID variable to none and return fail",
									"        pm.collectionVariables.set(\"xsede_ID\",\"NONE\");",
									"        pm.expect.fail(\" No element exist!\");",
									"    }",
									"",
									"    let midIdx = Math.floor(arrLen/2);",
									"    //console.log(midIdx);",
									"",
									"    //----------------------------",
									"    // Save ID",
									"    // get middle element ",
									"    ID = pm.response.json()[midIdx].rdr_resource_id;",
									"    console.log(\"SAVED rdr_resource_id: \" + ID);",
									"    // set to collection variable",
									"    pm.collectionVariables.set(\"xsede_ID\", ID);",
									"",
									"",
									"    //-----------------------------------",
									"    // Save ResourceID",
									"    // get middle element ",
									"    resourceId = pm.response.json()[midIdx].info_resourceid;",
									"    console.log(\"SAVED info_resourceid: \" + resourceId);",
									"    // set to collection variable",
									"    pm.collectionVariables.set(\"resourceID\", resourceId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/rdr-db/v2/rdr-xup/",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"rdr-db",
								"v2",
								"rdr-xup",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "rdr-db_v3",
			"item": [
				{
					"name": "rdr-xup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Save Parameters for next test\", function () {",
									"    // get mid index of response data array",
									"    let arrLen = pm.response.json().result_set.length;",
									"    //console.log(arrLen);",
									"    if (arrLen < 1) {",
									"        // set ID variable to none and return fail",
									"        pm.collectionVariables.set(\"xsede_ID\",\"NONE\");",
									"        pm.expect.fail(\" No element exist!\");",
									"    }",
									"",
									"    let midIdx = Math.floor(arrLen/2);",
									"    //console.log(midIdx);",
									"",
									"    //----------------------------",
									"    // Save ID",
									"    // get middle element ",
									"    ID = pm.response.json().result_set[midIdx].rdr_resource_id;",
									"    console.log(\"SAVED rdr_resource_id: \" + ID);",
									"    // set to collection variable",
									"    pm.collectionVariables.set(\"xsede_ID\", ID);",
									"",
									"",
									"    //-----------------------------------",
									"    // Save ResourceID",
									"    // get middle element ",
									"    resourceId = pm.response.json().result_set[midIdx].info_resourceid;",
									"    console.log(\"SAVED info_resourceid: \" + resourceId);",
									"    // set to collection variable",
									"    pm.collectionVariables.set(\"resourceID\", resourceId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/rdr-db/v3/rdr-xup/",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"rdr-db",
								"v3",
								"rdr-xup",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "IncaTests",
			"item": [
				{
					"name": "IncaTest1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/resource-api/v3/resource_esearch?search_terms=aws",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"resource-api",
								"v3",
								"resource_esearch"
							],
							"query": [
								{
									"key": "search_terms",
									"value": "aws"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "IncaTest2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/resource-api/v3/resource_esearch?affiliation=uiuc.edu&resource_groups=organizations&page=1&results_per_page=20",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"resource-api",
								"v3",
								"resource_esearch"
							],
							"query": [
								{
									"key": "affiliation",
									"value": "uiuc.edu"
								},
								{
									"key": "resource_groups",
									"value": "organizations"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "results_per_page",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "IncaTest3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/resource-api/v3/event_search/?affiliation=uiuc.edu&results_per_page=4&page=1",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"resource-api",
								"v3",
								"event_search",
								""
							],
							"query": [
								{
									"key": "affiliation",
									"value": "uiuc.edu"
								},
								{
									"key": "results_per_page",
									"value": "4"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "IncaTest4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let today = new Date();",
									"console.log(today);",
									"",
									"let todayfmt = new Date(today.getFullYear(), today.getMonth(), today.getDate()).toJSON().slice(0,10) + \"T00:00:00-05:00\";",
									"console.log(todayfmt);",
									"",
									"let nextweekfmt = new Date(today.getFullYear(), today.getMonth(), today.getDate()+7).toJSON().slice(0,10) + \"T00:00:00-05:00\";",
									"console.log(nextweekfmt);",
									"",
									"pm.environment.set(\"param1\", todayfmt );",
									"pm.environment.set(\"param2\", nextweekfmt );"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://info.xsede.org/wh1/resource-api/v3/event_search/?affiliation=uiuc.edu&start_date={{param1}}&end_date={{param2}}",
							"protocol": "https",
							"host": [
								"info",
								"xsede",
								"org"
							],
							"path": [
								"wh1",
								"resource-api",
								"v3",
								"event_search",
								""
							],
							"query": [
								{
									"key": "affiliation",
									"value": "uiuc.edu"
								},
								{
									"key": "start_date",
									"value": "{{param1}}"
								},
								{
									"key": "end_date",
									"value": "{{param2}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "xsede_ID",
			"value": "NONE"
		},
		{
			"key": "interfaceName",
			"value": ""
		},
		{
			"key": "resourceID",
			"value": ""
		},
		{
			"key": "serviceType",
			"value": ""
		},
		{
			"key": "appName",
			"value": ""
		},
		{
			"key": "rdr_Type",
			"value": ""
		},
		{
			"key": "info_siteID",
			"value": ""
		}
	]
}